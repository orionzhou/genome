launchDir = "$proj/genome/nf"
workDir = "$NXF_CACHE/work/genome"

includeConfig "$NXF_HOME/configs/nextflow.config"
process.conda = "$NXF_CONDA_CACHEDIR/genome"

params {
  //pick = 'lists/wheat_ABD.txt'
  pick = 'lists/test.txt'
  //pick = 'lists/wheat.txt'
  design = 'genomes.tsv'
  outdir = "$proj/s3/zhoup-genome"
  tracedir = "./pipeline_info"
}

process {
  maxRetries = 2
  withName:unzip { 
    //executor = 'local'
    memory = { check_max( 10.GB + 1.GB * task.attempt, 'memory' ) }
    cpus = { check_max( 1, 'cpus' ) }
    time = { check_max( 1.h + 1.h * task.attempt, 'time' ) }
  }
  withName:i_star {
    queue = { task.attempt==1 ? 'small,amdsmall' : task.attempt==2 ? 'ram256g,amdsmall,amd512' : 'ram1t' }
    memory = { task.attempt==1 ? 50.GB : task.attempt==2 ? 200.GB : 700.GB }
    cpus = { check_max( 4, 'cpus' ) }
    time = { check_max( 10.h + 1.h * task.attempt, 'time' ) }
  }
  withName:i_hisat2 {
    queue = { task.attempt==1 ? 'ram256g,amdsmall,amd512' : 'ram1t' }
    memory = { task.attempt==1 ? 200.GB : 700.GB }
    //queue = 'ram1t'
    //memory = 950.GB
    cpus = { check_max( 4, 'cpus' ) }
    time = { check_max( 10.h + 1.h * task.attempt, 'time' ) }
  }
  withName:i_bwa {
    queue = { task.attempt==1 ? 'small,amdsmall' : task.attempt==2 ? 'ram256g,amdsmall,amd512' : 'ram1t' }
    memory = { task.attempt==1 ? 50.GB : task.attempt==2 ? 200.GB : 700.GB }
    cpus = { check_max( 4, 'cpus' ) }
    time = { check_max( 10.h + 1.h * task.attempt, 'time' ) }
  }
  withName:i_salmon {
    cpus = { check_max( 4, 'cpus' ) }
    memory = { check_max( 30.GB + 1.GB * task.attempt, 'memory' ) }
    time = { check_max( 10.h + 1.h * task.attempt, 'time' ) }
  }
  withName:i_snpeff {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 26.GB + 1.GB * task.attempt, 'memory' ) }
    time = { check_max( 10.h + 1.h * task.attempt, 'time' ) }
  }
  withName:i_bismark {
    queue = { task.attempt==1 ? 'small,amdsmall' : task.attempt==2 ? 'ram256g,amdsmall,amd512' : 'ram1t' }
    memory = { task.attempt==1 ? 50.GB : task.attempt==2 ? 200.GB : 700.GB }
    cpus = { check_max( 6, 'cpus' ) }
    time = { check_max( 20.h + 1.h * task.attempt, 'time' ) }
  }
  withName:i_tandup {
    cpus = { check_max( 8, 'cpus' ) }
    memory = { check_max( 28.GB + 1.GB * task.attempt, 'memory' ) }
    time = { check_max( 10.h + 5.h * task.attempt, 'time' ) }
  }
  withName:i_rcfg {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 20.GB + 1.GB * task.attempt, 'memory' ) }
    time = { check_max( 2.h + 1.h * task.attempt, 'time' ) }
  }
}

def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
